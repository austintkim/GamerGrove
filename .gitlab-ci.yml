services:
    - docker:dind

stages:
    - test
    - build
    - deploy

variables:
  EC2_HOST: "35.173.203.96"

api-unit-tests-job:
    image: python:3-bullseye
    stage: test
    variables:
        DATABASE_URL: '${DATABASE_URL_FROM_ENV_FILE}'
        CORS_HOST: '${CORS_HOST}'
        SIGNING_KEY: '${SIGNING_KEY_FROM_ENV_FILE}'
        API_KEY: '${RAWG_API_KEY}'
    before_script:
    - python -m pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install --no-interaction --no-ansi
    script:
      - poetry run pytest api/tests --maxfail=1 --disable-warnings -q



# # Build API Image:
# # This job builds the API docker image and pushes it to the GitLab docker registry
# # When this job finishes you will need to use the glv-cloud-cli reset command
# # To deploy the new image
build-api-image:
  stage: build
  image: docker:git
  # needs:
  #   - tests
  variables:
    GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api
  before_script:
    # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
  script:
    - docker build --no-cache --tag $GITLAB_IMAGE:latest -f api/Dockerfile .
    - docker push $GITLAB_IMAGE:latest
  only:
    - main

# # Build the React/JavaScript front-end
build-front-end-job:
  stage: build
  image: node:lts-bullseye
  variables:
    VITE_RAWG_API_KEY: 0c4556270545498782c9a942f38cb48a
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - ghi/node_modules/
  before_script:
    - npm ci                     # install root dependencies (eslint, etc.)
    - cd ghi && npm ci && cd .. # install frontend dependencies
  script:
    - npm run lint              # lint using root script on ghi
    - cd ghi
    - VITE_API_HOST="https://gamergroveapi.com" npm run build -- --base=/gamer-grove/
  artifacts:
    paths:
      - ghi/dist/

# Deploy the React/JavaScript front-end to GitLab pages
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/dist/ public
    - echo '/* /index.html 200' > public/_redirects
  artifacts:
    paths:
      - public
  variables:
    GITLAB_PAGES_HTTP: "true"
    VITE_RAWG_API_KEY: 0c4556270545498782c9a942f38cb48a

deploy-to-ec2:
  stage: deploy
  image: docker:20.10.11
  variables:
    GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api
    DATABASE_URL: "postgresql://$PG_USER:$PG_PASSWORD@gamergrove.cbcwysw6wh0u.us-east-1.rds.amazonaws.com/postgres"
    SIGNING_KEY: $SIGNING_KEY

  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - || (echo "Failed to add SSH key" && exit 1)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "StrictHostKeyChecking no" > ~/.ssh/config
    - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts || (echo "Failed to ssh-keyscan" && exit 1)

  script:
    # Debug output
    - echo "SIGNING_KEY=$SIGNING_KEY"
    - echo "GITLAB_IMAGE=$GITLAB_IMAGE"
    - echo "DATABASE_URL=$DATABASE_URL"

    # Log in to GitLab Docker Registry
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin || (echo "Failed to login to Docker registry" && exit 1)

    # Deploy FastAPI container
    - ssh -v ubuntu@$EC2_HOST "
        docker pull $GITLAB_IMAGE:latest &&
        docker stop my-api || true &&
        docker rm my-api || true &&
        docker run -d --name my-api  -e SIGNING_KEY=$SIGNING_KEY -e DATABASE_URL=$DATABASE_URL -p 8000:80 $GITLAB_IMAGE:latest
      " || (echo "Failed to deploy Docker container" && exit 1)

    # Install and configure NGINX
    - ssh -v ubuntu@$EC2_HOST '
        sudo apt-get update &&
        sudo apt-get install -y nginx &&
        sudo tee /etc/nginx/sites-available/gamer-grove-fastapi <<EOF
        server {
          listen 80;
          server_name _;

          location / {
            proxy_pass http://localhost:8000;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
          }
        }
        EOF
        sudo ln -sf /etc/nginx/sites-available/gamer-grovefastapi /etc/nginx/sites-enabled/gamergrove-fastapi &&
        sudo rm -f /etc/nginx/sites-enabled/default &&
        sudo nginx -t &&
        sudo systemctl restart nginx
  only:
    - main
