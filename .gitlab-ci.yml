services:
    - docker:dind

stages:
    - test
    - build
    - deploy

# Run flake8 to check for code quality
# And also optionally run unit tests
tests:
    image: python:3-bullseye
    stage: test
    script:
        - pip install flake8
        - flake8 api
        # Run unit tests
api-unit-tests-job:
    image: python:3-bullseye
    stage: test
    needs:
        - tests
    variables:
        DATABASE_URL: '${DATABASE_URL_FROM_ENV_FILE}'
        CORS_HOST: '${CORS_HOST}'
        SIGNING_KEY: '${SIGNING_KEY_FROM_ENV_FILE}'
        API_KEY: '${RAWG_API_KEY}'
    script:
        - cd api
        - pip install -r requirements.txt
        - python -m pytest



# # Build API Image:
# # This job builds the API docker image and pushes it to the GitLab docker registry
# # When this job finishes you will need to use the glv-cloud-cli reset command
# # To deploy the new image
build-api-image:
  stage: build
  image: docker:git
  needs:
    - tests
  variables:
    GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api
  before_script:
    # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
  script:
    - docker build --tag $GITLAB_IMAGE:latest ./api
    - docker push $GITLAB_IMAGE:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "heroku"'


deploy-to-heroku:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    PORT: 8000
  script:
    - echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com
    - docker build -f api/Dockerfile -t ${CI_REGISTRY_IMAGE}/api:latest ./api
    - docker tag ${CI_REGISTRY_IMAGE}/api:latest registry.heroku.com/gamergrove/web
    - docker push registry.heroku.com/gamergrove/web
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "heroku"'

release-api-to-heroku:
  stage: deploy
  image: node:14
  before_script:
  - npm install -g heroku
  script:
  - heroku container:release web --app gamergrove
  rules:
  - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "heroku"'
# # Build the React/JavaScript front-end
build-front-end-job:
  stage: build
  image: node:lts-bullseye
  needs:
    - tests
  variables:
    # If either of these variables is defined in the GitLab
    # CI/CD variables, that value will override the value here.
    # You need to substitute in your real values for
    # GROUP_NAME, PROJECT_NAME, & WEBSERVICE_NAME below.
    # Don't forget to also replace PROJECT NAME in the npm run build line as well
    VITE_PUBLIC_URL: https://gamer-grove-gamergrove-e4b66709a0ca1018f06e6423b03cd88c405f322b.gitlab.io/
    VITE_API_HOST: https://gamergrove-1fd694cdd133.herokuapp.com/
    VITE_RAWG_API_KEY: 0c4556270545498782c9a942f38cb48a
  script:
    - cd ghi
    - npm install
    - npm run lint
    - npm run build -- --base=/gamer-grove/
    # The following line creates a _redirects file to redirect all URLs to index.html
    # Documentation: https://docs.gitlab.com/ee/gamergrove/gamergrove/pages/redirects.html#rewrite-all-requests-to-a-root-indexhtml
    - echo "/* /index.html 200" > dist/_redirects
  artifacts:
    paths:
      - ghi/dist/

# Deploy the React/JavaScript front-end to GitLab pages
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/dist/ public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "heroku"'
  variables:
    GITLAB_PAGES_HTTP: "true"
